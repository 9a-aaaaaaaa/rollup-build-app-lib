{"version":3,"file":"main.umd.js","sources":["../../node_modules/lodash-es/join.js","../../src/cjs/index.js","../../src/fetch/index.js","../../src/logger/index.js","../../src/app.js"],"sourcesContent":["/** Used for built-in method references. */\nvar arrayProto = Array.prototype;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeJoin = arrayProto.join;\n\n/**\n * Converts all elements in `array` into a string separated by `separator`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Array\n * @param {Array} array The array to convert.\n * @param {string} [separator=','] The element separator.\n * @returns {string} Returns the joined string.\n * @example\n *\n * _.join(['a', 'b', 'c'], '~');\n * // => 'a~b~c'\n */\nfunction join(array, separator) {\n  return array == null ? '' : nativeJoin.call(array, separator);\n}\n\nexport default join;\n","module.exports = {\n    name:\"yach\",\n    getVersion: function(){\n        return this.name;\n    }\n}","export default endpoint =>{\n    return fetch(`https://jsonplaceholder.typicode.com/todos/${endpoint}`)\n    .then(response => response.json())\n    .then(json => console.log(json))\n}","export const log = (message)=>{\n    console.log(message);\n}\n\nexport const info = function(data){\n    console.info(data)\n}","\nimport { name,version  } from \"../package.json\";\nimport { join } from 'lodash-es';\nimport yach from './cjs';\nimport fetchApi from './fetch'\nimport { log } from \"./logger\"\n\n\nconst skd ={\n    name,\n    version,\n    val: join([1,2,3,4,5],'@'),\n    data: [1],\n    getVersion: ()=>{\n        console.log(\"哈哈哈 \");\n        const version = yach.getVersion();\n        log(\"Hello world rollup build\",version);\n        if(process.env.NODE_ENV === 'production') {\n            log(99999)\n        }\n        else {\n            log(8888)\n        }\n    },\n    request: async ()=>{\n        const getData = await fetchApi(1);\n        return getData;\n    }\n}\nexport default skd;\n\n// import(\"./logger\").then(({log})=>{\n//     log(\"This is dynamic import infomation!\");\n// })\n\n\n// import { info,log } from \"./logger/index\";\n\n// fetchApi(1).then( data=>{\n//     log(data)\n// })"],"names":["yach"],"mappings":";;;;;;;;;EAAA;EACA,IAAI,UAAU,GAAG,KAAK,CAAC,SAAS,CAAC;AACjC;EACA;EACA,IAAI,UAAU,GAAG,UAAU,CAAC,IAAI,CAAC;AACjC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,SAAS,IAAI,CAAC,KAAK,EAAE,SAAS,EAAE;EAChC,EAAE,OAAO,KAAK,IAAI,IAAI,GAAG,EAAE,GAAG,UAAU,CAAC,IAAI,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;EAChE;;ECvBA,IAAA,GAAc,GAAG;EACjB,IAAI,IAAI,CAAC,MAAM;EACf,IAAI,UAAU,EAAE,UAAU;EAC1B,QAAQ,OAAO,IAAI,CAAC,IAAI,CAAC;EACzB,KAAK;EACL;;ACLA,iBAAe,QAAQ,GAAG;EAC1B,IAAI,OAAO,KAAK,CAAC,CAAC,2CAA2C,EAAE,QAAQ,CAAC,CAAC,CAAC;EAC1E,KAAK,IAAI,CAAC,QAAQ,IAAI,QAAQ,CAAC,IAAI,EAAE,CAAC;EACtC,KAAK,IAAI,CAAC,IAAI,IAAI,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;EACpC;;ECJO,MAAM,GAAG,GAAG,CAAC,OAAO,GAAG;EAC9B,IAAI,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;EACzB;;ACMK,QAAC,GAAG,EAAE;EACX,IAAI,IAAI;EACR,IAAI,OAAO;EACX,IAAI,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;EAC9B,IAAI,IAAI,EAAE,CAAC,CAAC,CAAC;EACb,IAAI,UAAU,EAAE,IAAI;EACpB,QAAQ,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;EAC5B,QAAwBA,GAAI,CAAC,UAAU,GAAG;EAC1C,QAAQ,GAAG,CAAC,0BAAkC,CAAC,CAAC;EAChD,QAGa;EACb,YAAY,GAAG,CAAC,IAAI,EAAC;EACrB,SAAS;EACT,KAAK;EACL,IAAI,OAAO,EAAE,UAAU;EACvB,QAAQ,MAAM,OAAO,GAAG,MAAM,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC1C,QAAQ,OAAO,OAAO,CAAC;EACvB,KAAK;EACL,EAAC;AAED;EACA;EACA;EACA;AACA;AACA;EACA;AACA;EACA;EACA;EACA;;;;;;;;"}